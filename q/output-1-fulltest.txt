Setup...
  Token: "function" of type:25 flag:0 @ L1C8
Setup complete.
Parsing... 
  parsing module
  Token: "increment" of type:42 flag:0 @ L1C18
  parsing function signature
  Token: ":" of type:37 flag:0 @ L1C19
    function set on: increment
  Token: "short" of type:4 flag:1 @ L1C24
  parsing scalar type
  Token: "number" of type:42 flag:0 @ L1C31
  parsing declaration list
  parsing variable declaration
  Token: ":" of type:37 flag:0 @ L1C32
  Token: "short" of type:4 flag:1 @ L1C37
  parsing type
  parsing scalar type
  Token: "end" of type:29 flag:0 @ L1C41
    variable set on: number
    Finished function signature parsing
    Checking for function existence... 
  parsing function body
  Token: "vars" of type:26 flag:0 @ L3C4
  parsing module
  Token: "x" of type:42 flag:0 @ L3C6
  parsing declaration list
  parsing variable declaration
  Token: ":" of type:37 flag:0 @ L3C7
  Token: "bool" of type:2 flag:1 @ L3C11
  parsing type
  parsing scalar type
  Token: "end" of type:29 flag:0 @ L3C15
    variable set on: x
  Token: "function" of type:25 flag:0 @ L5C8
  parsing module
  Token: "position" of type:42 flag:0 @ L5C17
  parsing function signature
  Token: ":" of type:37 flag:0 @ L5C18
    function set on: position
  Token: "short" of type:4 flag:1 @ L5C23
  parsing scalar type
  Token: "needle" of type:42 flag:0 @ L5C30
  parsing declaration list
  parsing variable declaration
  Token: ":" of type:37 flag:0 @ L5C31
  Token: "short" of type:4 flag:1 @ L5C36
  parsing type
  parsing scalar type
  Token: ";" of type:38 flag:0 @ L5C37
    variable set on: needle
  Token: "haystack" of type:42 flag:0 @ L5C46
  parsing declaration list
  parsing variable declaration
  Token: ":" of type:37 flag:0 @ L5C47
  Token: "short" of type:4 flag:1 @ L5C52
  parsing type
  parsing scalar type
  Token: "[" of type:35 flag:0 @ L5C53
  Token: "10" of type:41 flag:16 @ L5C55
  Token: "]" of type:36 flag:0 @ L5C56
  Token: "vars" of type:26 flag:0 @ L6C8
    variable set on: haystack
    Finished function signature parsing
    Checking for function existence... 
  parsing function body
  Token: "i" of type:42 flag:0 @ L6C10
  parsing declaration list
  parsing variable declaration
  Token: ":" of type:37 flag:0 @ L6C11
  Token: "short" of type:4 flag:1 @ L6C16
  parsing type
  parsing scalar type
  Token: ";" of type:38 flag:0 @ L6C17
    variable set on: i
  Token: "found" of type:42 flag:0 @ L6C23
  parsing declaration list
  parsing variable declaration
  Token: ":" of type:37 flag:0 @ L6C24
  Token: "bool" of type:2 flag:1 @ L6C28
  parsing type
  parsing scalar type
  Token: "do" of type:27 flag:0 @ L6C31
    variable set on: found
  Token: "set" of type:30 flag:0 @ L7C7
  parsing statement list
  parsing statement
  parsing l-value
  Token: "0" of type:41 flag:16 @ L7C11
  parsing expression
  Token: ";" of type:38 flag:0 @ L7C12
  Token: "set" of type:30 flag:0 @ L8C7
  parsing statement list
  parsing statement
  parsing l-value
  Token: "false" of type:24 flag:16 @ L8C19
  parsing expression
  Token: ";" of type:38 flag:0 @ L8C20
  Token: "{" of type:33 flag:0 @ L9C5
  parsing statement list
  parsing statement
  Token: "{" of type:33 flag:0 @ L10C9
  parsing statement list
  parsing statement
  Token: "set" of type:30 flag:0 @ L11C15
  parsing statement list
  parsing statement
  parsing l-value
  Token: "true" of type:23 flag:16 @ L11C26
  parsing expression
  Token: "}" of type:34 flag:0 @ L12C9
  Token: "if" of type:31 flag:0 @ L12C12
  Token: "=" of type:15 flag:2 @ L12C14
  parsing expression
  parsing expression
  parsing l-value
  Token: "[" of type:35 flag:0 @ L12C24
  parsing expression
  parsing l-value
  Token: "]" of type:36 flag:0 @ L12C26
  parsing expression
  parsing l-value
  Token: "else" of type:32 flag:0 @ L12C38
  Token: "{" of type:33 flag:0 @ L12C40
  Token: "set" of type:30 flag:0 @ L13C15
  parsing statement list
  parsing statement
  parsing l-value
  parsing expression
  parsing parameter list
  parsing expression
  parsing l-value
  Token: "!" of type:40 flag:0 @ L13C31
  parsing parameter list
  Token: "}" of type:34 flag:0 @ L14C9
  Token: "}" of type:34 flag:0 @ L15C5
  Token: "^" of type:39 flag:0 @ L15C7
  Token: "and" of type:17 flag:2 @ L15C11
  parsing expression
  Token: "<" of type:11 flag:2 @ L15C13
  parsing expression
  parsing expression
  parsing l-value
  Token: "10" of type:41 flag:16 @ L15C18
  parsing expression
  Token: "=" of type:15 flag:2 @ L15C20
  parsing expression
  parsing expression
  parsing l-value
  Token: "false" of type:24 flag:16 @ L15C32
  parsing expression
  Token: "return" of type:28 flag:0 @ L16C10
  Token: "neg" of type:20 flag:4 @ L16C14
  parsing expression
  Token: "neg" of type:20 flag:4 @ L16C18
  parsing expression
  parsing expression
  parsing l-value
  Token: "function" of type:25 flag:0 @ L19C8
  parsing module
  parsing function signature
  Token: ":" of type:37 flag:0 @ L19C19
    function set on: increment
  Token: "short" of type:4 flag:1 @ L19C24
  parsing scalar type
  parsing declaration list
  parsing variable declaration
  Token: ":" of type:37 flag:0 @ L19C32
  Token: "short" of type:4 flag:1 @ L19C37
  parsing type
  parsing scalar type
  Token: "do" of type:27 flag:0 @ L19C40
    variable set on: number
    Finished function signature parsing
    Checking for function existence... found a matching function call!
  parsing function body
  Token: "--" of type:22 flag:8 @ L20C6
  parsing statement list
  parsing statement
  parsing expression
  parsing l-value
  Token: ";" of type:38 flag:0 @ L20C13
  Token: "++" of type:21 flag:8 @ L21C6
  parsing statement list
  parsing statement
  parsing expression
  parsing l-value
  Token: ";" of type:38 flag:0 @ L21C13
  Token: "set" of type:30 flag:0 @ L22C7
  parsing statement list
  parsing statement
  parsing l-value
  Token: "+" of type:6 flag:2 @ L22C16
  parsing expression
  parsing expression
  parsing l-value
  Token: "1" of type:41 flag:16 @ L22C25
  parsing expression
  Token: "return" of type:28 flag:0 @ L23C10
  parsing expression
  parsing l-value
  Token: "vars" of type:26 flag:0 @ L26C4
  parsing module
  Token: "y" of type:42 flag:0 @ L26C6
  parsing declaration list
  parsing variable declaration
  Token: ":" of type:37 flag:0 @ L26C7
  Token: "long" of type:5 flag:1 @ L26C11
  parsing type
  parsing scalar type
  Token: "end" of type:29 flag:0 @ L26C15
    variable set on: y
  Token: "function" of type:25 flag:0 @ L29C8
  parsing module
  Token: "andtest" of type:42 flag:0 @ L29C16
  parsing function signature
  Token: ":" of type:37 flag:0 @ L29C17
    function set on: andtest
  Token: "bool" of type:2 flag:1 @ L29C21
  parsing scalar type
  Token: "something" of type:42 flag:0 @ L29C31
  parsing declaration list
  parsing variable declaration
  Token: ":" of type:37 flag:0 @ L29C32
  Token: "bool" of type:2 flag:1 @ L29C36
  parsing type
  parsing scalar type
  Token: "end" of type:29 flag:0 @ L29C40
    variable set on: something
    Finished function signature parsing
    Checking for function existence... 
  parsing function body
  Token: "function" of type:25 flag:0 @ L31C8
  parsing module
  parsing function signature
  Token: ":" of type:37 flag:0 @ L31C17
    function set on: andtest
  Token: "bool" of type:2 flag:1 @ L31C21
  parsing scalar type
  parsing declaration list
  parsing variable declaration
  Token: ":" of type:37 flag:0 @ L31C32
  Token: "bool" of type:2 flag:1 @ L31C36
  parsing type
  parsing scalar type
  Token: "return" of type:28 flag:0 @ L32C10
    variable set on: something
    Finished function signature parsing
    Checking for function existence... found a matching function call!
  parsing function body
  parsing expression
  parsing l-value
  Token: "end" of type:29 flag:0 @ L34C3
  parsing module
  Token: "ÿ" of type:1 flag:0 @ L35C1
Parsing succeeded.
Running type checker... 
  Type Debug @ L3C15: type bool of size 0
  Type Debug @ L26C15: type long of size 0
  Type Debug @ L1C41: type short of size 0
  Type Debug @ L20C13: lvalue number with no index
  Type Debug @ L20C13: incdec operating on short
  Type Debug @ L21C13: lvalue number with no index
  Type Debug @ L21C13: incdec operating on short
  Type Debug @ L22C25: lvalue number with no index
  Type Debug @ L23C10: binary + short and byte
    Converting right operand in binary expression
  Type Debug @ L22C16: lvalue number with no index
  Type Debug @ L23C10: assigning short into short
  Type Debug @ L26C4: lvalue number with no index
  Type Debug @ L1C41: function increment has type short
  Type Debug @ L5C37: type short of size 0
  Type Debug @ L6C8: type short of size 10
  Type Debug @ L6C17: type short of size 0
  Type Debug @ L6C31: type bool of size 0
  Type Debug @ L7C11: lvalue i with no index
  Type Debug @ L7C12: assigning byte into short
    Converting types on assignment statement
  Type Debug @ L8C19: lvalue found with no index
  Type Debug @ L8C20: assigning bool into bool
  Type Debug @ L11C26: lvalue found with no index
  Type Debug @ L12C9: assigning bool into bool
  Type Debug @ L13C31: lvalue i with no index
  Type Debug @ L14C9: funccall increment with 1 params
    checking param #1 of increment
  Type Debug @ L13C27: lvalue i with no index
  Type Debug @ L14C9: assigning short into short
  Type Debug @ L12C38: lvalue needle with no index
  Type Debug @ L12C26: lvalue i with no index
  Type Debug @ L12C33: lvalue haystack has index type short
  Type Debug @ L12C38: binary = short and short
  Type Debug @ L15C5: if statement condition of type bool
  Type Debug @ L15C32: lvalue found with no index
  Type Debug @ L16C10: binary = bool and bool
  Type Debug @ L15C18: lvalue i with no index
  Type Debug @ L15C20: binary < short and byte
    Converting right operand in binary expression
  Type Debug @ L16C10: binary and bool and bool
  Type Debug @ L19C8: lvalue i with no index
  Type Debug @ L19C8: unary neg operating on short
  Type Debug @ L19C8: unary neg operating on short
  Type Debug @ L6C8: function position has type short
  Type Debug @ L29C40: type bool of size 0
  Type Debug @ L34C3: lvalue something with no index
  Type Debug @ L29C40: function andtest has type bool
Type checker succeeded.
Dumping AST...
Module variables:
|  x : bool
|  y : long
Module functions:
|  increment : short definition
|  |  Parameters:
|  |  |  number : short
|  |  Statements:
|  |  |  Expression statement:
|  |  |  |  Decrement expression:
|  |  |  |  |  L-Value: number
|  |  |  Expression statement:
|  |  |  |  Increment expression:
|  |  |  |  |  L-Value: number
|  |  |  Assignment statement:
|  |  |  |  L-Value: number
|  |  |  |  Expression:
|  |  |  |  |  Binary + expression:
|  |  |  |  |  |  Left expression:
|  |  |  |  |  |  |  L-Value: number
|  |  |  |  |  |  Right expression:
|  |  |  |  |  |  |  Type Conversion (into short):
|  |  |  |  |  |  |  |  Constant: 1 : byte
|  |  Return expression:
|  |  |  L-Value: number
|  position : short definition
|  |  Parameters:
|  |  |  needle : short
|  |  |  haystack : short[10]
|  |  Local variables:
|  |  |  i : short
|  |  |  found : bool
|  |  Statements:
|  |  |  Assignment statement:
|  |  |  |  L-Value: i
|  |  |  |  Expression:
|  |  |  |  |  Type Conversion (into short):
|  |  |  |  |  |  Constant: 0 : byte
|  |  |  Assignment statement:
|  |  |  |  L-Value: found
|  |  |  |  Expression:
|  |  |  |  |  Constant: 1 : bool
|  |  |  Loop statement:
|  |  |  |  Expression:
|  |  |  |  |  Binary and expression:
|  |  |  |  |  |  Left expression:
|  |  |  |  |  |  |  Binary < expression:
|  |  |  |  |  |  |  |  Left expression:
|  |  |  |  |  |  |  |  |  L-Value: i
|  |  |  |  |  |  |  |  Right expression:
|  |  |  |  |  |  |  |  |  Type Conversion (into short):
|  |  |  |  |  |  |  |  |  |  Constant: 10 : byte
|  |  |  |  |  |  Right expression:
|  |  |  |  |  |  |  Binary = expression:
|  |  |  |  |  |  |  |  Left expression:
|  |  |  |  |  |  |  |  |  L-Value: found
|  |  |  |  |  |  |  |  Right expression:
|  |  |  |  |  |  |  |  |  Constant: 1 : bool
|  |  |  |  Statements:
|  |  |  |  |  Conditional statement:
|  |  |  |  |  |  Expression:
|  |  |  |  |  |  |  Binary = expression:
|  |  |  |  |  |  |  |  Left expression:
|  |  |  |  |  |  |  |  |  L-Value: haystack
|  |  |  |  |  |  |  |  |  |  Index:
|  |  |  |  |  |  |  |  |  |  |  L-Value: i
|  |  |  |  |  |  |  |  Right expression:
|  |  |  |  |  |  |  |  |  L-Value: needle
|  |  |  |  |  |  Then statements:
|  |  |  |  |  |  |  Assignment statement:
|  |  |  |  |  |  |  |  L-Value: found
|  |  |  |  |  |  |  |  Expression:
|  |  |  |  |  |  |  |  |  Constant: 1 : bool
|  |  |  |  |  |  Else statements:
|  |  |  |  |  |  |  Assignment statement:
|  |  |  |  |  |  |  |  L-Value: i
|  |  |  |  |  |  |  |  Expression:
|  |  |  |  |  |  |  |  |  Function call to increment:
|  |  |  |  |  |  |  |  |  |  Parameters:
|  |  |  |  |  |  |  |  |  |  |  L-Value: i
|  |  Return expression:
|  |  |  Unary neg expression:
|  |  |  |  Unary neg expression:
|  |  |  |  |  L-Value: i
|  andtest : bool definition
|  |  Parameters:
|  |  |  something : bool
|  |  Return expression:
|  |  |  L-Value: something
AST dumped.
